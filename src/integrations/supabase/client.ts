
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tcmqmmnbphalhhjqbdjx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRjbXFtbW5icGhhbGhoanFiZGp4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NDc1NTcsImV4cCI6MjA1ODMyMzU1N30.vgMHd9aH-SaQ9pNP3UJDiHyS-LiuheBlFEBT4RL4f5M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
  },
});

// This is a placeholder for future Cardano integration
export const getCardanoWallet = async () => {
  // Check if Nami wallet extension is available (or other Cardano wallets)
  const hasWallet = window.cardano && window.cardano.nami;
  
  if (!hasWallet) {
    throw new Error("No Cardano wallet found. Please install Nami or another compatible wallet.");
  }
  
  try {
    // Request wallet connection
    const api = await window.cardano.nami.enable();
    return api;
  } catch (error) {
    console.error("Failed to connect to Cardano wallet:", error);
    throw error;
  }
};

// Simulated wallet functions for demo purposes
export const simulateWalletConnection = async () => {
  // This is a placeholder for actual wallet connection
  await new Promise(resolve => setTimeout(resolve, 1000));
  return {
    address: "addr1qy8ac7qqy0vtulyl7wntmsxc6wex80gvcyjy33qffrhm7sh" + 
            Math.floor(Math.random() * 1000).toString().padStart(3, '0'),
    balance: Math.floor(Math.random() * 100),
    networkId: 0, // 0 for testnet, 1 for mainnet
  };
};

export const simulateTokens = async (address: string) => {
  // This is a placeholder for actual token fetching
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Generate random token data for demo
  const tokens = [];
  const count = Math.floor(Math.random() * 5) + 1; // 1-5 tokens
  
  for (let i = 0; i < count; i++) {
    tokens.push({
      id: `VVT-${(Math.floor(Math.random() * 999) + 1).toString().padStart(3, '0')}`,
      plantAge: Math.floor(Math.random() * 8) + 3, // 3-10 years
      nextHarvest: "Jan 2025",
      harvestKg: Number((Math.random() * 3 + 1).toFixed(1)), // 1-4 kg
      nextPayout: Number((Math.random() * 20 + 5).toFixed(2)), // $5-25
      totalPayout: Number((Math.random() * 100 + 10).toFixed(2)), // $10-110
    });
  }
  
  return {
    count,
    tokens,
    totalValue: count * 30, // $30 per token
  };
};
